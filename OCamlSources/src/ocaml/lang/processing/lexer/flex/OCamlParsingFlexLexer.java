/* The following code was generated by JFlex 1.4.1 on 20.04.10 18:07 */

/*
 * OCaml Support For IntelliJ Platform.
 * Copyright (C) 2010 Maxim Manuylov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/gpl-2.0.html>.
 */

package ocaml.lang.processing.lexer.flex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import ocaml.lang.processing.lexer.token.OCamlTokenTypes;               

import java.util.Map;
import java.util.HashMap;             

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 20.04.10 18:07 from the specification file
 * <tt>C:/diploma/OCamlPlugin/LexerGeneration/flex/parsing-lexer-specification.flex</tt>
 */
public class OCamlParsingFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 1;
  public static final int BEFORE_COMMENT_END = 3;
  public static final int BEFORE_COMMENT_BEGIN = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\30\1\66\1\32"+
    "\1\43\1\104\1\40\1\70\1\31\1\4\1\6\1\5\1\41\1\71"+
    "\1\25\1\23\1\40\1\14\1\13\6\12\2\7\1\37\1\73\1\74"+
    "\1\67\1\72\1\77\1\40\1\34\1\22\2\34\1\35\1\34\10\33"+
    "\1\20\10\33\1\16\2\33\1\100\1\26\1\75\1\40\1\10\1\102"+
    "\1\44\1\21\1\53\1\46\1\24\1\11\1\51\1\60\1\52\1\64"+
    "\1\36\1\54\1\63\1\45\1\17\1\56\1\36\1\50\1\47\1\27"+
    "\1\57\1\65\1\55\1\15\1\62\1\61\1\103\1\101\1\76\1\42"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\6\1\10\1\11\2\10\1\12\1\10\1\13"+
    "\1\10\1\14\1\1\1\15\1\16\1\17\1\20\1\21"+
    "\14\10\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\3\41\2\1\1\42\1\43\1\0\3\10\3\0\1\44"+
    "\1\10\1\45\2\10\1\46\3\10\1\47\1\50\1\51"+
    "\3\10\4\0\1\52\1\53\1\54\1\55\1\22\1\0"+
    "\1\2\1\10\1\56\1\10\1\57\3\10\1\60\1\61"+
    "\21\10\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\43"+
    "\1\0\1\110\1\10\1\111\3\6\5\10\1\112\2\10"+
    "\1\113\2\10\1\114\4\0\1\2\1\0\1\115\1\10"+
    "\1\116\1\117\3\10\1\120\1\121\6\10\1\122\1\123"+
    "\2\10\1\124\1\125\5\10\1\126\3\10\1\127\4\10"+
    "\1\130\3\10\1\131\1\132\1\133\1\134\5\0\1\10"+
    "\1\135\7\10\1\136\1\137\1\140\1\141\1\142\10\10"+
    "\1\143\2\10\1\144\2\10\2\0\7\10\1\145\1\146"+
    "\4\10\1\147\4\10\1\150\2\10\2\0\1\151\1\152"+
    "\1\153\4\10\1\154\1\10\1\155\1\156\2\10\1\157"+
    "\4\10\1\160\1\161\1\10\1\162\1\163\1\164\1\165"+
    "\1\166\3\10\1\167\3\10\1\170\1\171";

  private static int [] zzUnpackAction() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u0114\0\u019e"+
    "\0\u01e3\0\u0114\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u026d\0\u033c"+
    "\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564"+
    "\0\u05a9\0\u01e3\0\u01e3\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702"+
    "\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a"+
    "\0\u096f\0\u09b4\0\u01e3\0\u09f9\0\u0114\0\u0a3e\0\u0a83\0\u0ac8"+
    "\0\u0114\0\u0114\0\u0b0d\0\u0b52\0\u0b97\0\u0114\0\u0bdc\0\u0c21"+
    "\0\u0114\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0114\0\u0d7a\0\u0dbf"+
    "\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u026d\0\u0fa2"+
    "\0\u026d\0\u0fe7\0\u102c\0\u0114\0\u1071\0\u10b6\0\u10fb\0\u01e3"+
    "\0\u01e3\0\u026d\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u0564"+
    "\0\u1299\0\u0114\0\u0114\0\u0114\0\u0114\0\u05ee\0\u0633\0\u12de"+
    "\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u026d"+
    "\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9"+
    "\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911"+
    "\0\u1956\0\u199b\0\u05ee\0\u01e3\0\u01e3\0\u0114\0\u0114\0\u0114"+
    "\0\u01e3\0\u01e3\0\u01e3\0\u05ee\0\u0114\0\u0114\0\u0114\0\u0114"+
    "\0\u01e3\0\u0114\0\u01e3\0\u01e3\0\u0114\0\u0114\0\u0114\0\u0114"+
    "\0\u19e0\0\u1a25\0\u026d\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e"+
    "\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u026d\0\u1d1c\0\u1d61"+
    "\0\u026d\0\u1da6\0\u1deb\0\u0114\0\u1e30\0\u1e75\0\u1eba\0\u1eff"+
    "\0\u1f44\0\u1f89\0\u026d\0\u1fce\0\u026d\0\u026d\0\u2013\0\u2058"+
    "\0\u209d\0\u026d\0\u026d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6"+
    "\0\u223b\0\u026d\0\u026d\0\u2280\0\u22c5\0\u026d\0\u026d\0\u230a"+
    "\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532"+
    "\0\u026d\0\u2577\0\u25bc\0\u2601\0\u2646\0\u026d\0\u268b\0\u26d0"+
    "\0\u2715\0\u026d\0\u026d\0\u026d\0\u026d\0\u275a\0\u279f\0\u27e4"+
    "\0\u2829\0\u286e\0\u28b3\0\u026d\0\u28f8\0\u293d\0\u2982\0\u29c7"+
    "\0\u2a0c\0\u2a51\0\u2a96\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d"+
    "\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe"+
    "\0\u026d\0\u2d03\0\u2d48\0\u026d\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c"+
    "\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u026d"+
    "\0\u026d\0\u3084\0\u30c9\0\u310e\0\u3153\0\u026d\0\u3198\0\u31dd"+
    "\0\u3222\0\u3267\0\u026d\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u026d"+
    "\0\u026d\0\u026d\0\u33c0\0\u3405\0\u344a\0\u348f\0\u026d\0\u34d4"+
    "\0\u026d\0\u026d\0\u3519\0\u355e\0\u026d\0\u35a3\0\u35e8\0\u362d"+
    "\0\u3672\0\u026d\0\u026d\0\u36b7\0\u026d\0\u026d\0\u026d\0\u026d"+
    "\0\u026d\0\u36fc\0\u3741\0\u3786\0\u026d\0\u37cb\0\u3810\0\u3855"+
    "\0\u026d\0\u026d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\2\13\1\16\1\17\1\20\1\21\1\20\1\22"+
    "\1\20\1\23\1\24\1\25\1\5\1\26\1\7\1\27"+
    "\1\30\3\20\1\17\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\17\1\43\1\44"+
    "\1\45\1\46\1\47\4\17\1\50\1\17\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\4\71\1\72"+
    "\1\73\77\71\4\5\1\74\105\5\1\75\77\5\107\0"+
    "\1\7\107\0\1\76\104\0\1\32\15\0\1\32\1\0"+
    "\1\32\11\0\4\32\23\0\5\32\1\0\1\32\2\0"+
    "\1\32\1\0\1\32\2\0\1\32\7\0\2\13\1\0"+
    "\3\13\6\0\1\77\1\100\10\0\1\100\56\0\14\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\22\17\26\0\10\17\1\101\3\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\1\102"+
    "\12\17\1\103\6\17\26\0\2\13\1\0\3\13\2\104"+
    "\2\105\2\106\1\77\1\100\10\0\1\100\56\0\14\20"+
    "\1\0\1\20\2\0\1\20\1\0\1\20\1\0\4\20"+
    "\5\0\22\20\26\0\2\17\1\107\7\17\1\110\1\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\4\17\1\111\5\17\1\112\7\17\26\0\14\17"+
    "\1\0\1\113\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\22\17\42\0\1\114\70\0\6\17\1\115\5\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\1\17\1\116\6\17\1\117\11\17\24\0\1\32"+
    "\15\0\1\120\1\0\1\32\11\0\4\32\23\0\4\32"+
    "\1\121\1\0\1\32\2\0\1\32\1\0\1\32\2\0"+
    "\1\32\7\0\10\17\1\122\3\17\1\0\1\17\2\0"+
    "\1\17\1\0\1\17\1\0\4\17\5\0\4\17\1\123"+
    "\7\17\1\124\1\17\1\125\3\17\17\0\26\126\1\127"+
    "\2\126\1\0\53\126\26\130\1\131\3\130\1\132\52\130"+
    "\37\0\1\133\27\0\1\134\2\0\1\135\17\0\1\136"+
    "\15\0\1\136\1\0\1\136\11\0\4\136\23\0\5\136"+
    "\1\0\1\136\2\0\1\136\1\0\1\136\2\0\1\136"+
    "\1\0\3\137\3\0\1\140\2\0\3\140\13\0\1\137"+
    "\63\0\14\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\1\17\1\141\1\17\1\142\16\17"+
    "\26\0\14\17\1\0\1\143\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\22\17\26\0\10\17\1\144\3\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\22\17\26\0\14\17\1\0\1\17\2\0\1\145"+
    "\1\0\1\17\1\0\4\17\5\0\6\17\1\146\13\17"+
    "\26\0\14\17\1\0\1\147\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\22\17\26\0\2\17\1\150\11\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\1\17\1\151\20\17\26\0\10\17\1\152\3\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\10\17\1\153\11\17\26\0\6\17\1\154\1\17"+
    "\1\155\3\17\1\0\1\156\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\1\157\2\17\1\160\16\17\26\0"+
    "\14\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\6\17\1\161\5\17\1\162\5\17\26\0"+
    "\14\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\1\163\3\17\1\164\15\17\26\0\10\17"+
    "\1\165\3\17\1\0\1\166\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\1\167\12\17\1\170\6\17\26\0"+
    "\14\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\1\171\5\17\1\172\13\17\24\0\1\136"+
    "\15\0\1\136\1\0\1\136\11\0\4\136\23\0\1\136"+
    "\1\173\3\136\1\0\1\136\2\0\1\136\1\0\1\136"+
    "\2\0\1\136\5\0\1\32\15\0\1\32\1\0\1\32"+
    "\11\0\4\32\23\0\2\32\1\174\2\32\1\0\1\32"+
    "\2\0\1\32\1\0\1\32\2\0\1\32\5\0\1\32"+
    "\15\0\1\32\1\0\1\32\11\0\4\32\23\0\4\32"+
    "\1\175\1\0\1\32\1\176\1\177\1\32\1\0\1\32"+
    "\2\0\1\32\73\0\1\200\16\0\1\32\15\0\1\32"+
    "\1\0\1\201\11\0\1\202\3\32\23\0\5\32\1\0"+
    "\1\203\2\0\1\32\1\0\1\32\2\0\1\32\5\0"+
    "\1\136\15\0\1\136\1\0\1\136\11\0\4\136\23\0"+
    "\5\136\1\0\1\136\2\0\1\204\1\0\1\136\2\0"+
    "\1\136\72\0\1\205\1\0\1\206\4\0\1\207\10\0"+
    "\1\32\15\0\1\32\1\0\1\32\11\0\4\32\23\0"+
    "\5\32\1\0\1\32\1\210\1\0\1\32\1\0\1\211"+
    "\2\0\1\32\74\0\1\212\15\0\1\32\15\0\1\32"+
    "\1\0\1\32\11\0\1\213\3\32\23\0\5\32\1\0"+
    "\1\32\2\0\1\32\1\0\1\32\2\0\1\214\5\0"+
    "\1\215\105\0\1\216\103\0\1\217\105\0\1\220\105\0"+
    "\2\77\1\0\3\77\7\0\1\100\10\0\1\100\56\0"+
    "\1\221\2\0\3\221\10\0\1\222\13\0\1\222\52\0"+
    "\14\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\4\17\1\223\15\17\26\0\14\17\1\0"+
    "\1\17\2\0\1\17\1\0\1\17\1\0\4\17\5\0"+
    "\10\17\1\224\11\17\26\0\14\17\1\0\1\17\2\0"+
    "\1\17\1\0\1\17\1\0\4\17\5\0\1\17\1\225"+
    "\20\17\26\0\1\226\1\0\4\226\4\0\2\226\1\0"+
    "\1\226\7\0\2\226\6\0\1\226\1\0\1\226\4\0"+
    "\1\226\43\0\3\227\103\0\2\230\77\0\14\17\1\0"+
    "\1\17\2\0\1\17\1\0\1\17\1\0\4\17\5\0"+
    "\20\17\1\231\1\17\26\0\14\17\1\0\1\232\2\0"+
    "\1\17\1\0\1\17\1\0\4\17\5\0\22\17\26\0"+
    "\14\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\5\17\1\233\14\17\26\0\14\17\1\0"+
    "\1\17\2\0\1\234\1\0\1\17\1\0\4\17\5\0"+
    "\7\17\1\235\12\17\26\0\14\17\1\0\1\17\2\0"+
    "\1\17\1\0\1\17\1\0\4\17\5\0\2\17\1\236"+
    "\17\17\26\0\14\17\1\0\1\17\2\0\1\17\1\0"+
    "\1\17\1\0\4\17\5\0\3\17\1\237\16\17\26\0"+
    "\14\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\13\17\1\240\2\17\1\241\3\17\26\0"+
    "\14\17\1\0\1\242\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\22\17\26\0\14\17\1\0\1\17\2\0"+
    "\1\17\1\0\1\17\1\0\4\17\5\0\12\17\1\243"+
    "\7\17\50\0\1\244\62\0\1\245\2\0\3\245\1\246"+
    "\3\0\1\126\4\0\5\126\12\0\1\126\2\0\1\126"+
    "\35\0\2\130\4\0\1\247\2\0\3\247\1\250\3\0"+
    "\1\130\4\0\5\130\12\0\1\130\2\0\1\130\35\0"+
    "\3\251\3\0\1\140\2\0\3\140\13\0\1\251\1\0"+
    "\1\252\61\0\14\17\1\0\1\17\2\0\1\17\1\0"+
    "\1\17\1\0\4\17\5\0\2\17\1\253\17\17\26\0"+
    "\14\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\3\17\1\254\1\255\15\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\11\17\1\256\10\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\1\17"+
    "\1\257\7\17\1\260\10\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\4\17"+
    "\1\261\15\17\26\0\14\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\5\17\1\262\14\17"+
    "\26\0\14\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\7\17\1\263\12\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\6\17\1\264\1\265\4\17\1\266\5\17\26\0"+
    "\14\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\1\17\1\267\20\17\26\0\14\17\1\0"+
    "\1\17\2\0\1\17\1\0\1\17\1\0\4\17\5\0"+
    "\1\270\21\17\26\0\10\17\1\271\3\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\22\17"+
    "\26\0\14\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\4\17\1\272\15\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\273\1\0\1\17\1\0\4\17"+
    "\5\0\22\17\26\0\14\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\1\17\1\274\13\17"+
    "\1\275\4\17\26\0\14\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\4\17\1\276\3\17"+
    "\1\277\11\17\26\0\14\17\1\0\1\17\2\0\1\300"+
    "\1\0\1\17\1\0\4\17\5\0\22\17\26\0\14\17"+
    "\1\0\1\301\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\6\17\1\302\13\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\4\17"+
    "\1\303\15\17\26\0\14\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\6\17\1\304\13\17"+
    "\26\0\14\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\2\17\1\305\17\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\306\1\0\1\17\1\0\4\17"+
    "\5\0\22\17\26\0\14\17\1\0\1\17\2\0\1\307"+
    "\1\0\1\17\1\0\4\17\5\0\22\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\310\1\0\1\17\1\0\4\17"+
    "\5\0\22\17\26\0\14\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\10\17\1\311\11\17"+
    "\26\0\14\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\4\17\1\312\15\17\26\0\2\221"+
    "\1\0\3\221\77\0\1\221\2\0\3\221\77\0\14\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\3\17\1\313\16\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\7\17"+
    "\1\314\12\17\26\0\6\226\4\0\2\226\1\0\1\226"+
    "\7\0\2\226\6\0\1\226\1\0\1\226\4\0\1\226"+
    "\41\0\1\227\1\0\3\227\100\0\1\230\2\0\2\230"+
    "\77\0\14\17\1\0\1\315\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\22\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\1\17"+
    "\1\316\20\17\26\0\14\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\6\17\1\317\13\17"+
    "\26\0\14\17\1\0\1\320\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\22\17\26\0\14\17\1\0\1\321"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\22\17"+
    "\26\0\14\17\1\0\1\322\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\22\17\26\0\14\17\1\0\1\323"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\22\17"+
    "\26\0\14\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\1\17\1\324\20\17\26\0\14\17"+
    "\1\0\1\325\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\22\17\26\0\1\326\2\0\3\326\77\0\1\327"+
    "\1\0\4\327\4\0\2\327\1\0\1\327\7\0\2\327"+
    "\6\0\1\327\1\0\1\327\4\0\1\327\40\0\1\330"+
    "\2\0\3\330\77\0\1\331\1\0\4\331\4\0\2\331"+
    "\1\0\1\331\7\0\2\331\6\0\1\331\1\0\1\331"+
    "\4\0\1\331\32\0\3\251\24\0\1\251\1\0\1\252"+
    "\52\0\26\252\1\332\3\252\1\7\52\252\7\0\14\17"+
    "\1\0\1\333\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\22\17\26\0\14\17\1\0\1\334\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\22\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\1\17\1\335\20\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\13\17"+
    "\1\336\6\17\26\0\14\17\1\0\1\17\2\0\1\337"+
    "\1\0\1\17\1\0\4\17\5\0\22\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\10\17\1\340\11\17\26\0\14\17\1\0\1\341"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\22\17"+
    "\26\0\14\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\3\17\1\342\16\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\3\17\1\343\16\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\4\17"+
    "\1\344\15\17\26\0\14\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\2\17\1\345\17\17"+
    "\26\0\14\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\16\17\1\346\3\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\14\17\1\347\5\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\1\17"+
    "\1\350\20\17\26\0\14\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\10\17\1\351\11\17"+
    "\26\0\14\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\3\17\1\352\16\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\21\17\1\353\26\0\14\17\1\0\1\17\2\0"+
    "\1\17\1\0\1\17\1\0\4\17\5\0\13\17\1\354"+
    "\6\17\26\0\14\17\1\0\1\17\2\0\1\17\1\0"+
    "\1\17\1\0\4\17\5\0\14\17\1\355\5\17\26\0"+
    "\14\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\7\17\1\356\12\17\26\0\14\17\1\0"+
    "\1\17\2\0\1\17\1\0\1\17\1\0\4\17\5\0"+
    "\1\357\21\17\26\0\14\17\1\0\1\17\2\0\1\360"+
    "\1\0\1\17\1\0\4\17\5\0\22\17\26\0\14\17"+
    "\1\0\1\361\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\22\17\26\0\14\17\1\0\1\17\2\0\1\362"+
    "\1\0\1\17\1\0\4\17\5\0\22\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\7\17\1\363\12\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\1\17"+
    "\1\364\20\17\26\0\14\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\4\17\1\365\15\17"+
    "\26\0\14\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\12\17\1\366\7\17\26\0\1\126"+
    "\2\0\3\126\77\0\1\126\1\0\4\126\4\0\2\126"+
    "\1\0\1\126\7\0\2\126\6\0\1\126\1\0\1\126"+
    "\4\0\1\126\40\0\1\130\2\0\3\130\77\0\1\130"+
    "\1\0\4\130\4\0\2\130\1\0\1\130\7\0\2\130"+
    "\6\0\1\130\1\0\1\130\4\0\1\130\40\0\1\367"+
    "\2\0\3\367\1\370\3\0\1\252\4\0\5\252\12\0"+
    "\1\252\2\0\1\252\43\0\14\17\1\0\1\17\2\0"+
    "\1\17\1\0\1\17\1\0\4\17\5\0\4\17\1\371"+
    "\15\17\26\0\14\17\1\0\1\17\2\0\1\372\1\0"+
    "\1\17\1\0\4\17\5\0\22\17\26\0\14\17\1\0"+
    "\1\17\2\0\1\17\1\0\1\17\1\0\4\17\5\0"+
    "\7\17\1\373\12\17\26\0\14\17\1\0\1\17\2\0"+
    "\1\17\1\0\1\17\1\0\4\17\5\0\6\17\1\374"+
    "\13\17\26\0\14\17\1\0\1\17\2\0\1\17\1\0"+
    "\1\17\1\0\4\17\5\0\13\17\1\375\6\17\26\0"+
    "\14\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\4\17\1\376\15\17\26\0\14\17\1\0"+
    "\1\17\2\0\1\377\1\0\1\17\1\0\4\17\5\0"+
    "\22\17\26\0\14\17\1\0\1\17\2\0\1\17\1\0"+
    "\1\17\1\0\4\17\5\0\3\17\1\u0100\16\17\26\0"+
    "\14\17\1\0\1\u0101\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\22\17\26\0\14\17\1\0\1\u0102\2\0"+
    "\1\17\1\0\1\17\1\0\4\17\5\0\22\17\26\0"+
    "\14\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\1\u0103\21\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\10\17"+
    "\1\u0104\11\17\26\0\10\17\1\u0105\3\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\22\17"+
    "\26\0\14\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\14\17\1\u0106\5\17\26\0\12\17"+
    "\1\u0107\1\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\22\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\13\17"+
    "\1\u0108\6\17\26\0\10\17\1\u0109\3\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\6\17"+
    "\1\u010a\13\17\26\0\14\17\1\0\1\17\2\0\1\u010b"+
    "\1\0\1\17\1\0\4\17\5\0\22\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\1\17\1\u010c\20\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\u010d\1\0\1\17\1\0\4\17\5\0\22\17"+
    "\26\0\1\u010e\2\0\3\u010e\77\0\1\u010f\1\0\4\u010f"+
    "\4\0\2\u010f\1\0\1\u010f\7\0\2\u010f\6\0\1\u010f"+
    "\1\0\1\u010f\4\0\1\u010f\40\0\14\17\1\0\1\17"+
    "\2\0\1\u0110\1\0\1\17\1\0\4\17\5\0\22\17"+
    "\26\0\10\17\1\u0111\3\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\22\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\u0112\1\0\1\17\1\0\4\17"+
    "\5\0\22\17\26\0\14\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\1\u0113\21\17\26\0"+
    "\14\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\2\17\1\u0114\17\17\26\0\14\17\1\0"+
    "\1\17\2\0\1\17\1\0\1\17\1\0\4\17\5\0"+
    "\6\17\1\u0115\13\17\26\0\14\17\1\0\1\17\2\0"+
    "\1\17\1\0\1\17\1\0\4\17\5\0\4\17\1\u0116"+
    "\15\17\26\0\14\17\1\0\1\17\2\0\1\17\1\0"+
    "\1\17\1\0\4\17\5\0\4\17\1\u0117\15\17\26\0"+
    "\14\17\1\0\1\17\2\0\1\u0118\1\0\1\17\1\0"+
    "\4\17\5\0\22\17\26\0\14\17\1\0\1\u0119\2\0"+
    "\1\17\1\0\1\17\1\0\4\17\5\0\22\17\26\0"+
    "\14\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0"+
    "\4\17\5\0\2\17\1\u011a\17\17\26\0\14\17\1\0"+
    "\1\17\2\0\1\17\1\0\1\17\1\0\4\17\5\0"+
    "\10\17\1\u011b\11\17\26\0\14\17\1\0\1\17\2\0"+
    "\1\17\1\0\1\17\1\0\4\17\5\0\1\u011c\21\17"+
    "\26\0\14\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\4\17\1\u011d\15\17\26\0\10\17"+
    "\1\u011e\3\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\22\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\1\u011f"+
    "\21\17\26\0\14\17\1\0\1\17\2\0\1\17\1\0"+
    "\1\17\1\0\4\17\5\0\6\17\1\u0120\13\17\26\0"+
    "\1\252\2\0\3\252\77\0\1\252\1\0\4\252\4\0"+
    "\2\252\1\0\1\252\7\0\2\252\6\0\1\252\1\0"+
    "\1\252\4\0\1\252\40\0\14\17\1\0\1\17\2\0"+
    "\1\17\1\0\1\17\1\0\4\17\5\0\10\17\1\u0121"+
    "\11\17\26\0\14\17\1\0\1\u0122\2\0\1\17\1\0"+
    "\1\17\1\0\4\17\5\0\22\17\26\0\14\17\1\0"+
    "\1\17\2\0\1\u0123\1\0\1\17\1\0\4\17\5\0"+
    "\22\17\26\0\14\17\1\0\1\17\2\0\1\17\1\0"+
    "\1\17\1\0\4\17\5\0\1\u0124\21\17\26\0\14\17"+
    "\1\0\1\u0125\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\22\17\26\0\14\17\1\0\1\u0126\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\22\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\10\17\1\u0127\11\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\1\17"+
    "\1\u0128\20\17\26\0\14\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\10\17\1\u0129\11\17"+
    "\26\0\10\17\1\u012a\3\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\22\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\6\17\1\u012b\13\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\6\17"+
    "\1\u012c\13\17\26\0\14\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\4\17\5\0\1\17\1\u012d\20\17"+
    "\26\0\14\17\1\0\1\17\2\0\1\17\1\0\1\17"+
    "\1\0\4\17\5\0\15\17\1\u012e\4\17\26\0\14\17"+
    "\1\0\1\17\2\0\1\17\1\0\1\17\1\0\4\17"+
    "\5\0\1\17\1\u012f\20\17\26\0\14\17\1\0\1\u0130"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\22\17"+
    "\26\0\14\17\1\0\1\17\2\0\1\u0131\1\0\1\17"+
    "\1\0\4\17\5\0\22\17\26\0\14\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\4\17\5\0\4\17"+
    "\1\u0132\15\17\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14490];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\2\1\1\11\42\1\1\11"+
    "\3\1\2\11\3\1\1\11\2\1\1\11\4\1\1\11"+
    "\1\1\1\0\3\1\3\0\5\1\1\11\11\1\4\0"+
    "\4\11\1\1\1\0\36\1\3\11\4\1\4\11\1\1"+
    "\1\11\2\1\4\11\1\1\1\0\21\1\1\11\4\0"+
    "\1\1\1\0\53\1\5\0\34\1\2\0\25\1\2\0"+
    "\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private int myNestedCommentsDepth;

  private int mySavedTokenStart;

  private void saveNextTokenStart() {
    mySavedTokenStart = zzStartRead + yylength();
  }

  private void restoreSavedTokenStart() {
    zzStartRead = mySavedTokenStart;
  }


  public OCamlParsingFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OCamlParsingFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 53: 
          { return OCamlTokenTypes.GT_RBRACKET;
          }
        case 122: break;
        case 73: 
          { return OCamlTokenTypes.FUN_KEYWORD;
          }
        case 123: break;
        case 36: 
          { return OCamlTokenTypes.OF_KEYWORD;
          }
        case 124: break;
        case 10: 
          { return OCamlTokenTypes.DOT;
          }
        case 125: break;
        case 75: 
          { return OCamlTokenTypes.TRY_KEYWORD;
          }
        case 126: break;
        case 15: 
          { return OCamlTokenTypes.PLUS;
          }
        case 127: break;
        case 31: 
          { return OCamlTokenTypes.LBRACE;
          }
        case 128: break;
        case 103: 
          { return OCamlTokenTypes.MATCH_KEYWORD;
          }
        case 129: break;
        case 100: 
          { return OCamlTokenTypes.BEGIN_KEYWORD;
          }
        case 130: break;
        case 112: 
          { return OCamlTokenTypes.INCLUDE_KEYWORD;
          }
        case 131: break;
        case 105: 
          { return OCamlTokenTypes.ASSERT_KEYWORD;
          }
        case 132: break;
        case 86: 
          { return OCamlTokenTypes.MOD_KEYWORD;
          }
        case 133: break;
        case 64: 
          { return OCamlTokenTypes.VBAR_VBAR;
          }
        case 134: break;
        case 93: 
          { return OCamlTokenTypes.DONE_KEYWORD;
          }
        case 135: break;
        case 70: 
          { myNestedCommentsDepth++;
                            saveNextTokenStart();
                            yybegin(COMMENT);
                            return OCamlTokenTypes.COMMENT_BEGIN;
          }
        case 136: break;
        case 2: 
          { return OCamlTokenTypes.WHITE_SPACE;
          }
        case 137: break;
        case 66: 
          { return OCamlTokenTypes.DOLLAR_COLON;
          }
        case 138: break;
        case 50: 
          { return OCamlTokenTypes.NOT_EQ;
          }
        case 139: break;
        case 88: 
          { return OCamlTokenTypes.OPEN_KEYWORD;
          }
        case 140: break;
        case 22: 
          { return OCamlTokenTypes.GT;
          }
        case 141: break;
        case 17: 
          { return OCamlTokenTypes.HASH;
          }
        case 142: break;
        case 115: 
          { return OCamlTokenTypes.MUTABLE_KEYWORD;
          }
        case 143: break;
        case 45: 
          { return OCamlTokenTypes.COLON_GT;
          }
        case 144: break;
        case 99: 
          { return OCamlTokenTypes.FALSE_KEYWORD;
          }
        case 145: break;
        case 1: 
          { return OCamlTokenTypes.BAD_CHARACTER;
          }
        case 146: break;
        case 12: 
          { return OCamlTokenTypes.QUOTE;
          }
        case 147: break;
        case 59: 
          { return OCamlTokenTypes.QUEST_QUEST;
          }
        case 148: break;
        case 52: 
          { return OCamlTokenTypes.GT_GT;
          }
        case 149: break;
        case 110: 
          { return OCamlTokenTypes.METHOD_KEYWORD;
          }
        case 150: break;
        case 78: 
          { return OCamlTokenTypes.ASR_KEYWORD;
          }
        case 151: break;
        case 119: 
          { return OCamlTokenTypes.EXCEPTION_KEYWORD;
          }
        case 152: break;
        case 90: 
          { return OCamlTokenTypes.TRUE_KEYWORD;
          }
        case 153: break;
        case 82: 
          { return OCamlTokenTypes.LOR_KEYWORD;
          }
        case 154: break;
        case 109: 
          { return OCamlTokenTypes.MODULE_KEYWORD;
          }
        case 155: break;
        case 56: 
          { return OCamlTokenTypes.LT_MINUS;
          }
        case 156: break;
        case 121: 
          { return OCamlTokenTypes.INITIALIZER_KEYWORD;
          }
        case 157: break;
        case 91: 
          { return OCamlTokenTypes.THEN_KEYWORD;
          }
        case 158: break;
        case 106: 
          { return OCamlTokenTypes.DOWNTO_KEYWORD;
          }
        case 159: break;
        case 30: 
          { return OCamlTokenTypes.ACCENT;
          }
        case 160: break;
        case 16: 
          { return OCamlTokenTypes.TILDE;
          }
        case 161: break;
        case 46: 
          { return OCamlTokenTypes.AS_KEYWORD;
          }
        case 162: break;
        case 117: 
          { return OCamlTokenTypes.FUNCTION_KEYWORD;
          }
        case 163: break;
        case 83: 
          { return OCamlTokenTypes.LET_KEYWORD;
          }
        case 164: break;
        case 37: 
          { return OCamlTokenTypes.OR_KEYWORD;
          }
        case 165: break;
        case 9: 
          { return OCamlTokenTypes.UCFC_IDENTIFIER;
          }
        case 166: break;
        case 96: 
          { return OCamlTokenTypes.LAZY_KEYWORD;
          }
        case 167: break;
        case 79: 
          { return OCamlTokenTypes.NEW_KEYWORD;
          }
        case 168: break;
        case 51: 
          { return OCamlTokenTypes.AMP_AMP;
          }
        case 169: break;
        case 76: 
          { return OCamlTokenTypes.CHAR_LITERAL;
          }
        case 170: break;
        case 11: 
          { return OCamlTokenTypes.MINUS;
          }
        case 171: break;
        case 97: 
          { return OCamlTokenTypes.WITH_KEYWORD;
          }
        case 172: break;
        case 111: 
          { return OCamlTokenTypes.FUNCTOR_KEYWORD;
          }
        case 173: break;
        case 98: 
          { return OCamlTokenTypes.WHEN_KEYWORD;
          }
        case 174: break;
        case 29: 
          { return OCamlTokenTypes.VBAR;
          }
        case 175: break;
        case 67: 
          { return OCamlTokenTypes.DOLLAR_DOLLAR;
          }
        case 176: break;
        case 38: 
          { return OCamlTokenTypes.DOT_DOT;
          }
        case 177: break;
        case 25: 
          { return OCamlTokenTypes.RBRACKET;
          }
        case 178: break;
        case 118: 
          { return OCamlTokenTypes.EXTERNAL_KEYWORD;
          }
        case 179: break;
        case 27: 
          { return OCamlTokenTypes.QUEST;
          }
        case 180: break;
        case 57: 
          { return OCamlTokenTypes.LT_COLON;
          }
        case 181: break;
        case 47: 
          { return OCamlTokenTypes.DO_KEYWORD;
          }
        case 182: break;
        case 113: 
          { return OCamlTokenTypes.INHERIT_KEYWORD;
          }
        case 183: break;
        case 102: 
          { return OCamlTokenTypes.WHILE_KEYWORD;
          }
        case 184: break;
        case 63: 
          { return OCamlTokenTypes.VBAR_RBRACKET;
          }
        case 185: break;
        case 95: 
          { return OCamlTokenTypes.LAND_KEYWORD;
          }
        case 186: break;
        case 104: 
          { return OCamlTokenTypes.OBJECT_KEYWORD;
          }
        case 187: break;
        case 5: 
          { return OCamlTokenTypes.RPAR;
          }
        case 188: break;
        case 14: 
          { return OCamlTokenTypes.INFIX_OPERATOR;
          }
        case 189: break;
        case 7: 
          { return OCamlTokenTypes.UNDERSCORE;
          }
        case 190: break;
        case 23: 
          { return OCamlTokenTypes.SEMICOLON;
          }
        case 191: break;
        case 107: 
          { return OCamlTokenTypes.STRUCT_KEYWORD;
          }
        case 192: break;
        case 40: 
          { return OCamlTokenTypes.MINUS_GT;
          }
        case 193: break;
        case 116: 
          { return OCamlTokenTypes.VIRTUAL_KEYWORD;
          }
        case 194: break;
        case 71: 
          { myNestedCommentsDepth--;
                            if (myNestedCommentsDepth == 0) {
                              yybegin(YYINITIAL);
                            }
                            else {
                              saveNextTokenStart();
                              yybegin(COMMENT);
                            }
                            return OCamlTokenTypes.COMMENT_END;
          }
        case 195: break;
        case 85: 
          { return OCamlTokenTypes.LSL_KEYWORD;
          }
        case 196: break;
        case 108: 
          { return OCamlTokenTypes.PARSER_KEYWORD;
          }
        case 197: break;
        case 28: 
          { return OCamlTokenTypes.LBRACKET;
          }
        case 198: break;
        case 114: 
          { return OCamlTokenTypes.PRIVATE_KEYWORD;
          }
        case 199: break;
        case 61: 
          { return OCamlTokenTypes.LBRACKET_LT;
          }
        case 200: break;
        case 19: 
          { return OCamlTokenTypes.EQ;
          }
        case 201: break;
        case 43: 
          { return OCamlTokenTypes.COLON_COLON;
          }
        case 202: break;
        case 48: 
          { return OCamlTokenTypes.IF_KEYWORD;
          }
        case 203: break;
        case 44: 
          { return OCamlTokenTypes.COLON_EQ;
          }
        case 204: break;
        case 20: 
          { return OCamlTokenTypes.AMP;
          }
        case 205: break;
        case 13: 
          { return OCamlTokenTypes.COLON;
          }
        case 206: break;
        case 3: 
          { return OCamlTokenTypes.LPAR;
          }
        case 207: break;
        case 89: 
          { return OCamlTokenTypes.ELSE_KEYWORD;
          }
        case 208: break;
        case 65: 
          { return OCamlTokenTypes.LBRACE_LT;
          }
        case 209: break;
        case 80: 
          { return OCamlTokenTypes.SIG_KEYWORD;
          }
        case 210: break;
        case 94: 
          { return OCamlTokenTypes.LXOR_KEYWORD;
          }
        case 211: break;
        case 18: 
          { return OCamlTokenTypes.PREFIX_OPERATOR;
          }
        case 212: break;
        case 41: 
          { return OCamlTokenTypes.TO_KEYWORD;
          }
        case 213: break;
        case 58: 
          { return OCamlTokenTypes.LT_LT;
          }
        case 214: break;
        case 8: 
          { return OCamlTokenTypes.LCFC_IDENTIFIER;
          }
        case 215: break;
        case 81: 
          { return OCamlTokenTypes.REC_KEYWORD;
          }
        case 216: break;
        case 120: 
          { return OCamlTokenTypes.CONSTRAINT_KEYWORD;
          }
        case 217: break;
        case 74: 
          { return OCamlTokenTypes.END_KEYWORD;
          }
        case 218: break;
        case 60: 
          { return OCamlTokenTypes.LBRACKET_GT;
          }
        case 219: break;
        case 33: 
          { /* ignore */
          }
        case 220: break;
        case 77: 
          { return OCamlTokenTypes.AND_KEYWORD;
          }
        case 221: break;
        case 34: 
          { myNestedCommentsDepth = 1;
                            saveNextTokenStart();
                            yybegin(COMMENT);
                            return OCamlTokenTypes.COMMENT_BEGIN;
          }
        case 222: break;
        case 6: 
          { return OCamlTokenTypes.INTEGER_LITERAL;
          }
        case 223: break;
        case 42: 
          { return OCamlTokenTypes.STRING_LITERAL;
          }
        case 224: break;
        case 72: 
          { return OCamlTokenTypes.FOR_KEYWORD;
          }
        case 225: break;
        case 32: 
          { return OCamlTokenTypes.DOLLAR;
          }
        case 226: break;
        case 92: 
          { return OCamlTokenTypes.TYPE_KEYWORD;
          }
        case 227: break;
        case 84: 
          { return OCamlTokenTypes.LSR_KEYWORD;
          }
        case 228: break;
        case 62: 
          { return OCamlTokenTypes.LBRACKET_VBAR;
          }
        case 229: break;
        case 69: 
          { yypushback(yylength());
                            restoreSavedTokenStart();
                            yybegin(BEFORE_COMMENT_END);
                            if (yylength() != 0) {
                              return OCamlTokenTypes.COMMENT;
                            }
          }
        case 230: break;
        case 54: 
          { return OCamlTokenTypes.GT_RBRACE;
          }
        case 231: break;
        case 21: 
          { return OCamlTokenTypes.COMMA;
          }
        case 232: break;
        case 35: 
          { return OCamlTokenTypes.FLOAT_LITERAL;
          }
        case 233: break;
        case 87: 
          { return OCamlTokenTypes.VAL_KEYWORD;
          }
        case 234: break;
        case 101: 
          { return OCamlTokenTypes.CLASS_KEYWORD;
          }
        case 235: break;
        case 26: 
          { return OCamlTokenTypes.RBRACE;
          }
        case 236: break;
        case 49: 
          { return OCamlTokenTypes.IN_KEYWORD;
          }
        case 237: break;
        case 39: 
          { return OCamlTokenTypes.MINUS_DOT;
          }
        case 238: break;
        case 55: 
          { return OCamlTokenTypes.SEMICOLON_SEMICOLON;
          }
        case 239: break;
        case 24: 
          { return OCamlTokenTypes.LT;
          }
        case 240: break;
        case 4: 
          { return OCamlTokenTypes.MULT;
          }
        case 241: break;
        case 68: 
          { yypushback(yylength());
                            restoreSavedTokenStart();
                            yybegin(BEFORE_COMMENT_BEGIN);
                            if (yylength() != 0) {
                              return OCamlTokenTypes.COMMENT;
                            }
          }
        case 242: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case COMMENT: {
              restoreSavedTokenStart();
                            yybegin(YYINITIAL);
                            if (yylength() != 0) {
                              return OCamlTokenTypes.COMMENT;
                            }
            }
            case 307: break;
            default:
              {
                yybegin(YYINITIAL);
                            return null;
              }
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
